FROM ubuntu:22.04

# Evitar prompts durante la instalación
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    build-essential \
    pkg-config \
    libssl-dev \
    libgtk-3-dev \
    libwebkit2gtk-4.0-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    mingw-w64 \
    wine \
    wine64 \
    git \
    && rm -rf /var/lib/apt/lists/*

# Instalar Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Instalar pnpm
RUN npm install -g pnpm@8.9.0

# Instalar Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Agregar target de Windows
RUN rustup target add x86_64-pc-windows-gnu

# Configurar Wine (para usar librerías de Windows en cross-compilation)
RUN winecfg

# Instalar cross para cross-compilation
RUN cargo install cross@0.2.5

# Configurar directorio de trabajo
WORKDIR /app

# Copiar archivos de configuración
COPY package.json pnpm-workspace.yaml ./
COPY backend/package.json ./backend/
COPY apps/web/package.json ./apps/web/

# Copiar schema de Prisma antes de instalar dependencias
COPY backend/prisma ./backend/prisma/

# Instalar dependencias
RUN pnpm install

# Copiar resto del código fuente
COPY . .

# Configurar variables para cross-compilation
ENV CC_x86_64_pc_windows_gnu="x86_64-w64-mingw32-gcc"
ENV CXX_x86_64_pc_windows_gnu="x86_64-w64-mingw32-g++"
ENV AR_x86_64_pc_windows_gnu="x86_64-w64-mingw32-ar"
ENV CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="x86_64-w64-mingw32-gcc"

# Script de build
RUN chmod +x build-all.sh

# Comando por defecto
CMD ["bash", "-c", "pnpm run build:web && cd backend && pnpm run build && pnpm run prisma:generate && pnpm run pkg:windows && pnpm run copy:windows && echo 'Build completado. Binarios en backend/dist-bin y src-tauri/binaries'"]
